[gd_resource type="VisualShader" load_steps=7 format=3 uid="uid://bdhyfvlessgfa"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_c6cjw"]
input_name = "uv"

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_125d3"]
parameter_name = "SAMPLES"
hint = 2
max = 32
step = 4

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_jp7wi"]
parameter_name = "WIDTH"
hint = 2
min = 1.0
max = 24.0
step = 0.5

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_5ntua"]
expanded_output_ports = [0]
parameter_name = "Color_Outline"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_spav6"]
input_name = "color"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_adc25"]
size = Vector2(720, 600)
expression = "// float PI = 3.14;
float angle = .0;
float testedAlpha = .0;

for (int i = 0; i < samples; i++) {
	angle += 1./(float(samples)/2.) * PI;
	vec2 testPoint = vec2(uv.x + width * cos(angle), uv.y + width * sin(angle) );
	float a = texture(TEXTURE, uv + testPoint).a;
	testedAlpha = max(a, testedAlpha);
}



color_out = vec3(0.);
alpha = 1.;"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 Color_Outline : source_color;
uniform int SAMPLES : hint_range(0, 32, 4);
uniform float WIDTH : hint_range(1, 24, 0.5);



void fragment() {
// ColorParameter:5
	vec4 n_out5p0 = Color_Outline;


// Input:10
	vec2 n_out10p0 = UV;


// Input:8
	vec4 n_out8p0 = COLOR;


// IntParameter:12
	int n_out12p0 = SAMPLES;


// FloatParameter:13
	float n_out13p0 = WIDTH;


	vec3 n_out9p0;
	float n_out9p1;
// Expression:9
	n_out9p0 = vec3(0.0, 0.0, 0.0);
	n_out9p1 = 0.0;
	{
		// float PI = 3.14;
		float angle = .0;
		float testedAlpha = .0;
		
		for (int i = 0; i < n_out12p0; i++) {
			angle += 1./(float(n_out12p0)/2.) * PI;
			vec2 testPoint = vec2(n_out10p0.x + n_out13p0 * cos(angle), n_out10p0.y + n_out13p0 * sin(angle) );
			float a = texture(TEXTURE, n_out10p0 + testPoint).a;
			testedAlpha = max(a, testedAlpha);
		}
		
		
		
		n_out9p0 = vec3(0.);
		n_out9p1 = 1.;
	}


// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(920, 460)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_5ntua")
nodes/fragment/5/position = Vector2(-1140, 300)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_spav6")
nodes/fragment/8/position = Vector2(-1180, 620)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_adc25")
nodes/fragment/9/position = Vector2(-540, 420)
nodes/fragment/9/size = Vector2(720, 600)
nodes/fragment/9/input_ports = "0,5,outline_color;1,3,uv;2,5,color;3,1,samples;4,0,width;"
nodes/fragment/9/output_ports = "0,4,color_out;1,0,alpha;"
nodes/fragment/9/expression = "// float PI = 3.14;
float angle = .0;
float testedAlpha = .0;

for (int i = 0; i < samples; i++) {
	angle += 1./(float(samples)/2.) * PI;
	vec2 testPoint = vec2(uv.x + width * cos(angle), uv.y + width * sin(angle) );
	float a = texture(TEXTURE, uv + testPoint).a;
	testedAlpha = max(a, testedAlpha);
}



color_out = vec3(0.);
alpha = 1.;"
nodes/fragment/10/node = SubResource("VisualShaderNodeInput_c6cjw")
nodes/fragment/10/position = Vector2(-1180, 540)
nodes/fragment/12/node = SubResource("VisualShaderNodeIntParameter_125d3")
nodes/fragment/12/position = Vector2(-1120, 700)
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatParameter_jp7wi")
nodes/fragment/13/position = Vector2(-1120, 980)
nodes/fragment/connections = PackedInt32Array(5, 0, 9, 0, 8, 0, 9, 2, 10, 0, 9, 1, 9, 0, 0, 0, 9, 1, 0, 1, 12, 0, 9, 3, 13, 0, 9, 4)
